class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def detect_loop(head):
    slow = head
    fast = head

    while fast is not None and fast.next is not None:
        slow = slow.next
        fast = fast.next.next

        if slow == fast:
            return slow

    return None

def remove_loop(head):
    loop_node = detect_loop(head)

    if loop_node is None:
        return head  # No loop in the linked list

    # Find the node just before the loop node
    ptr1 = head
    ptr2 = loop_node

    while ptr1.next != ptr2.next:
        ptr1 = ptr1.next
        ptr2 = ptr2.next

    # Break the loop by setting the next pointer of the node just before the loop node to NULL
    ptr2.next = None

    return head
# Example 1:
# Input: N = 3, value[] = [1, 3, 4], X = 2
# Output: 1

head = Node(1)
head.next = Node(3)
head.next.next = Node(4)
head.next.next.next = head.next

head = remove_loop(head)

while head is not None:
    print(head.data, end=' ')
    head = head.next
# Output: 1

# Example 2:
# Input: N = 4, value[] = [1, 8, 3, 4], X = 0
# Output: 1

head = Node(1)
head.next = Node(8)
head.next.next = Node(3)
head.next.next.next = Node(4)

head = remove_loop(head)

while head is not None:
    print(head.data, end=' ')
    head = head.next
# Output: 1 8 3 4

# Example 3:
# Input: N = 3, value[] = [1, 2, 3], X = 0
# Output: 1 2 3

head = Node(1)
head.next = Node(2)
head.next.next = Node(3)

head = remove_loop(head)

while head is not None:
    print(head.data, end=' ')
    head = head.next
# Output: 1 2 3
