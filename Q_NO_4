class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def reverse(head):
    prev = None
    curr = head

    while curr is not None:
        next_node = curr.next
        curr.next = prev
        prev = curr
        curr = next_node

    return prev

def is_palindrome(head):
    if head is None or head.next is None:
        return True

    slow = head
    fast = head

    # Move slow and fast pointers to find the middle node
    while fast is not None and fast.next is not None:
        slow = slow.next
        fast = fast.next.next

    # Reverse the second half of the linked list
    second_half = reverse(slow.next)
    slow.next = None

    # Compare the values of nodes in the first and reversed second half
    p1 = head
    p2 = second_half

    while p1 is not None and p2 is not None:
        if p1.data != p2.data:
            return False
        p1 = p1.next
        p2 = p2.next

    return True
